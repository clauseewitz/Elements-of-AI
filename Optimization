#1-----------------------------------------Listing Pinaple Routes, recursion-----------------------------------------------------1#
def permutations(route, ports):
    if len(ports) < 1:
        print(' '.join([portnames[i] for i in route]))
    else:
        for i in range(len(ports)):
            permutations(route+[ports[i]], ports[:i]+ports[i+1:])
 
permutations([0], list(range(1, len(portnames))))

#2------------------------------------------Pinaple route emission-----------------------------------------------------2# 
portnames = ["PAN", "AMS", "CAS", "NYC", "HEL"]

# https://sea-distances.org/
# nautical miles converted to km

D = [
        [0,8943,8019,3652,10545],
        [8943,0,2619,6317,2078],
        [8019,2619,0,5836,4939],
        [3652,6317,5836,0,7825],
        [10545,2078,4939,7825,0]
    ]
costs = []
# https://timeforchange.org/co2-emissions-shipping-goods
# assume 20g per km per metric ton (of pineapples)

co2 = 0.020
# DATA BLOCK ENDS

# these variables are initialised to nonsensical values
# your program should determine the correct values for them
smallest = 1000000
bestroute = [0, 0, 0, 0, 0]
routes = []
def permutations(route, ports):
    
    if len(ports) < 1:
        
             
        z = 0
        count = 0
        for i in range(0,  len(route)-1):
            x = route[i]     #current harbor
            y = route[i+1]   #next harbor
            cost = D[x][y]   #cost of movin from harbor x and y
            z = cost +z      #sum cost of traveling across all 5 harbors
            count = count +1 #check for end of loop to add the costs and harbors to lists
            
            if count == (len(route) - 1): #at the end of each loop, add the route and cost to lists "costs" and "routes"
                costs.append(z)
                routes.append(route)
    else:
        for i in range(len(ports)):
            permutations(route+[ports[i]], ports[:i]+ports[i+1:])
 
    
    

def main():
    # Do not edit any (global) variables using this function, as it will mess up the testing

    # this will start the recursion 
    permutations([0], list(range(1, len(portnames))))
    smallest = min(costs) * 0.02                                                              #check smalles value in route, multiply by co2 / km
    bestroute = (routes[costs.index(min(costs))])                                             #check whick index in routes that corresponds to the smalest value#
    # print the best route and its emissions
    print(' '.join([portnames[i] for i in bestroute]) + " %.1f kg" % smallest)
    
    
main()

#2.----------------------------------------Smoother pinaple route emissions(ZIP)-------------------------------------------2#
portnames = ["PAN", "AMS", "CAS", "NYC", "HEL"]

D = [
        [0,8943,8019,3652,10545],
        [8943,0,2619,6317,2078],
        [8019,2619,0,5836,4939],
        [3652,6317,5836,0,7825],
        [10545,2078,4939,7825,0]
    ]

co2 = 0.020

smallest = 1000000
bestroute = None

def permutations(route, ports):
    global smallest, bestroute
    if len(ports) < 1:
        score = co2 * sum(D[i][j] for i, j in zip(route[:-1], route[1:]))
        if score < smallest:
            smallest = score
            bestroute = route
    else:
        for i in range(len(ports)):
            permutations(route+[ports[i]], ports[:i]+ports[i+1:])

def main():
    permutations([0], list(range(1, len(portnames))))

    print(' '.join([portnames[i] for i in bestroute]) + " %.1f kg" % smallest)

main()




#----------------------------------------------------END-------------------------------------------------------------#
