#-----------------------------------Exercise 11 Price of a house-----------------------------------------#
# input values for three m√∂kkis: size, size of sauna, distance to water, number of indoor bathrooms, 
# proximity of neighbors
X = [[66, 5, 15, 2, 500],[21, 3, 50, 1, 100],[120, 15, 5, 2, 1200]]
c = [3000, 200, -50, 5000, 100]    # coefficient values
def countList(lst):
    return sum(type(el)== type([]) for el in lst)

def predict(X, c):
    price = 0
    Y = countList(X)
    
    
    for i in range(Y):
        price = 0
        z = len(X[i])
        for j in range(z):
            price = price + c[j]*X[i][j]
           
        print(price)     
    
predict(X, c)
#--------------------------------------------------Exercise 12 ------------------------------------------------#
import numpy as np

# data
X = np.array([[66, 5, 15, 2, 500], 
              [21, 3, 50, 1, 100], 
              [120, 15, 5, 2, 1200]])
y = np.array([250000, 60000, 525000])

# alternative sets of coefficient values
c = np.array([[3000, 200 , -50, 5000, 100], 
              [2000, -250, -100, 150, 250], 
              [3000, -100, -150, 0, 150]])   

def find_best(X, y, c):
    smallest_error = np.Inf
    best_index = -1
    z = 0
    lst = []
    
    for coeff in c:
        
        price = X @ c[z] 
        price2 = np.array(price, dtype='int64')**2
        price3 = np.array(y,dtype='int64')**2
        error = np.subtract(price2,price3)
        error2 = abs(error)
        error3 = sum(error2)
        lst.append(error3)
        
        z = z + 1                    # edit here: calculate the sum of squared error with coefficient set coeff and
    index_min = np.argmin(lst)
    best_index = index_min     # keep track of the one yielding the smallest squared error
    print("the best set is set %d" % best_index)


find_best(X, y, c)
